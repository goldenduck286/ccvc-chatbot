# app.py - Phi√™n b·∫£n HO√ÄN CH·ªàNH: T·ª± ƒë·ªông hi·ªÉn th·ªã PDF n·∫øu l√† link Google Drive ‚Äî full width, kh√¥ng c·∫ßn nh·∫•n xem tr∆∞·ªõc
import streamlit as st
from sentence_transformers import SentenceTransformer, util
import pandas as pd
import numpy as np
import re

# ==================== LOAD MODEL & DATA ====================
@st.cache_resource
def load_model_and_data():
    model = SentenceTransformer('all-MiniLM-L6-v2')
    df = pd.read_excel("cau_hoi_tra_loi.xlsx")
    questions = df['C√¢u h·ªèi m·∫´u'].tolist()
    answers = df['C√¢u tr·∫£ l·ªùi'].tolist()
    question_embeddings = model.encode(questions, convert_to_tensor=True)
    return model, questions, answers, question_embeddings, df

model, all_questions, all_answers, question_embeddings, df = load_model_and_data()

# ==================== H√ÄM T√åM C√ÇU TR·∫¢ L·ªúI ====================
def find_best_answer(user_question, top_k=1):
    user_embedding = model.encode(user_question, convert_to_tensor=True)
    cos_scores = util.cos_sim(user_embedding, question_embeddings)[0]
    top_results = np.argpartition(-cos_scores, range(top_k))[:top_k]
    
    results = []
    for idx in top_results:
        score = cos_scores[idx].item()
        results.append({
            'question': all_questions[idx],
            'answer': all_answers[idx],
            'similarity': score
        })
    return results

# ==================== H√ÄM X·ª¨ L√ù LINK GOOGLE DRIVE ====================
def is_google_drive_pdf_link(text):
    """Ki·ªÉm tra xem chu·ªói c√≥ ph·∫£i l√† link Google Drive ƒë·∫øn file PDF kh√¥ng"""
    pattern = r"https://drive\.google\.com/file/d/([a-zA-Z0-9_-]+)/"
    match = re.search(pattern, text)
    return match

def get_direct_download_link(drive_url):
    """Chuy·ªÉn link Google Drive sang link t·∫£i tr·ª±c ti·∫øp"""
    match = is_google_drive_pdf_link(drive_url)
    if match:
        file_id = match.group(1)
        return f"https://drive.google.com/uc?export=download&id={file_id}"
    return drive_url

def get_embed_pdf_link(drive_url):
    """Chuy·ªÉn link Google Drive sang link xem tr∆∞·ªõc PDF trong iframe"""
    match = is_google_drive_pdf_link(drive_url)
    if match:
        file_id = match.group(1)
        return f"https://drive.google.com/file/d/{file_id}/preview"
    return None

# ==================== GIAO DI·ªÜN WEB ====================
st.set_page_config(page_title="Chatbot H·ªèi ƒê√°p", page_icon="üí¨", layout="wide")
st.title("üí¨ Chatbot T√¨m Ki·∫øm C√¢u Tr·∫£ L·ªùi")

st.markdown("""
Vui l√≤ng **ch·ªçn m·ªôt c√¢u h·ªèi** t·ª´ danh s√°ch b√™n d∆∞·ªõi, sau ƒë√≥ nh·∫•n **G·ª≠i** ƒë·ªÉ nh·∫≠n c√¢u tr·∫£ l·ªùi.
""")

# ‚ûï SELECTBOX DUY NH·∫§T ‚Äî KH√îNG √î NH·∫¨P LI·ªÜU
chosen_question = st.selectbox(
    "üìå Ch·ªçn c√¢u h·ªèi:",
    options=[""] + all_questions,
    format_func=lambda x: "‚Äî Vui l√≤ng ch·ªçn ‚Äî" if x == "" else x,
    index=0,
    key="final_selector"
)

# N√∫t g·ª≠i
if st.button("üîç G·ª≠i"):
    if not chosen_question.strip():
        st.warning("‚ö†Ô∏è Vui l√≤ng ch·ªçn c√¢u h·ªèi tr∆∞·ªõc khi g·ª≠i!")
    else:
        with st.spinner("ƒêang t√¨m c√¢u tr·∫£ l·ªùi ph√π h·ª£p..."):
            results = find_best_answer(chosen_question, top_k=1)
            best = results[0]

            if best['similarity'] > 0.5:
                answer = best['answer']
                st.success("‚úÖ **C√¢u tr·∫£ l·ªùi:**")

                # Ki·ªÉm tra n·∫øu l√† link Google Drive PDF
                drive_match = is_google_drive_pdf_link(answer)
                if drive_match:
                    file_id = drive_match.group(1)
                    download_link = get_direct_download_link(answer)
                    preview_link = get_embed_pdf_link(answer)

                    # Hi·ªÉn th·ªã n√∫t t·∫£i
                    st.markdown(f"üìÑ [üì• T·∫£i file PDF]({download_link})")

                    # T·ª∞ ƒê·ªòNG HI·ªÇN TH·ªä FILE PDF ‚Äî FULL WIDTH
                    if preview_link:
                        st.components.v1.iframe(
                            src=preview_link,
                            width=None,  # = 100%
                            height=700,
                            scrolling=True
                        )
                else:
                    # Hi·ªÉn th·ªã text b√¨nh th∆∞·ªùng
                    st.write(answer)
            else:
                st.error("‚ùå Xin l·ªói, t√¥i ch∆∞a t√¨m ƒë∆∞·ª£c c√¢u tr·∫£ l·ªùi ph√π h·ª£p.")

# Footer nh·ªè
st.markdown("---")
st.caption("¬© 2025 Chatbot H·ªèi ƒê√°p - Powered by ducnv.hth TT CNTT VNPT H√† Tƒ©nh")